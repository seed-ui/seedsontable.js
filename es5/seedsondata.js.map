{"version":3,"sources":["seedsondata.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;IAEa,W,WAAA,W;;;;;AAIX,uBAAY,OAAZ,EAAqD;AAAA;;AAAA,QAAhC,UAAgC,yDAAnB,EAAmB;AAAA,QAAf,QAAe,yDAAJ,EAAI;AAAA;;AACnD,SAAK,QAAL,GAAgB,OAAhB;AACA,SAAK,YAAL,GAAoB,YAAY,gBAAZ,CAA6B,OAA7B,CAApB;AACA,SAAK,aAAL,GAAqB,KAAK,OAAL,CAAa,GAAb,CAAiB,UAAC,MAAD;AAAA,aAAY,OAAO,SAAnB;AAAA,KAAjB,CAArB;AACA,SAAK,eAAL,GAAuB,KAAK,OAAL,CAAa,GAAb,CAAiB,UAAC,MAAD;AAAA,aAAY,OAAO,OAAnB;AAAA,KAAjB,CAAvB;AACA,SAAK,cAAL,GAAsB,KAAK,OAAL,CAAa,IAAb,CAAkB,UAAC,MAAD;AAAA,aAAY,OAAO,aAAnB;AAAA,KAAlB,CAAtB;AACA,SAAK,sBAAL,GAA8B,KAAK,OAAL,CAAa,IAAb,CAAkB,UAAC,MAAD;AAAA,aAAY,OAAO,qBAAnB;AAAA,KAAlB,CAA9B;AACA,SAAK,KAAL,GAAa,CACX,KAAK,WAAL,CAAiB,MAAjB,CAAwB,UAAC,GAAD,EAAM,KAAN,EAAa,KAAb,EAAuB;AAAE,UAAI,KAAJ,IAAa,KAAb,CAAoB,OAAO,GAAP;AAAa,KAAlF,EAAoF,EAApF,CADW,EAEX,KAAK,WAAL,CAAiB,MAAjB,CAAwB,UAAC,GAAD,EAAM,KAAN,EAAa,KAAb,EAAuB;AAAE,UAAI,KAAJ,IAAa,MAAK,YAAL,CAAkB,KAAlB,CAAb,CAAuC,OAAO,GAAP;AAAa,KAArG,EAAuG,EAAvG,CAFW,EAGX,KAAK,WAAL,CAAiB,MAAjB,CAAwB,UAAC,GAAD,EAAM,KAAN,EAAa,KAAb,EAAuB;AAAE,UAAI,KAAJ,IAAa,MAAK,cAAL,CAAoB,KAApB,CAAb,CAAyC,OAAO,GAAP;AAAa,KAAvG,EAAyG,EAAzG,CAHW,EAIX,MAJW,CAIJ,WAAW,GAAX,CAAe,UAAC,GAAD;AAAA,aAAS,sBAAc,EAAd,EAAkB,GAAlB,CAAT;AAAA,KAAf,CAJI,CAAb;AAKA,SAAK,SAAL,GAAiB,QAAjB;AACD;;;;kCA4DyB;AAAA;;AAAA,UAAd,OAAc,yDAAJ,EAAI;AAAA,UACjB,OADiB,GACmB,OADnB,CACjB,OADiB;AAAA,UACR,WADQ,GACmB,OADnB,CACR,WADQ;AAAA,UACK,UADL,GACmB,OADnB,CACK,UADL;;AAExB,UAAI,UAAU,KAAK,OAAnB;AACA,UAAI,cAAc,KAAK,IAAL,CAAU,KAAV,CAAgB,CAAhB,CAAlB;AACA,UAAI,eAAe,KAAK,qBAAxB,EAA+C;AAAA;AAC7C,cAAM,4BAA4B,OAAK,qBAAL,CAA2B,IAA7D;AACA,wBAAc,YAAY,MAAZ,CAAmB,UAAC,GAAD;AAAA,mBAAS,CAAC,IAAI,yBAAJ,CAAV;AAAA,WAAnB,CAAd;AAF6C;AAG9C;AACD,UAAI,OAAJ,EAAa;AACX,kBAAU,QAAQ,MAAR,CAAe,UAAC,MAAD;AAAA,iBAAY,YAAY,cAAZ,CAA2B,OAAO,OAAlC,EAA2C,OAA3C,CAAZ;AAAA,SAAf,CAAV;AACA,YAAI,KAAK,aAAT,EAAwB;AAAA;AACtB,gBAAM,oBAAoB,OAAK,aAAL,CAAmB,IAA7C;AACA,0BAAc,YAAY,MAAZ,CAAmB,UAAC,GAAD;AAAA,qBAAS,YAAY,cAAZ,CAA2B,IAAI,iBAAJ,CAA3B,EAAmD,OAAnD,CAAT;AAAA,aAAnB,CAAd;AAFsB;AAGvB;AACF;AACD,UAAI,UAAJ,EAAgB;AACd,kBAAU,QAAQ,MAAR,CAAe,UAAC,MAAD;AAAA,iBAAY,CAAC,OAAO,MAApB;AAAA,SAAf,CAAV;AACD;AACD,UAAI,QAAQ,MAAR,KAAmB,KAAK,OAAL,CAAa,MAApC,EAA4C;AAC1C,eAAO,YAAY,GAAZ,CAAgB,UAAC,GAAD;AAAA,iBAAS,sBAAc,EAAd,EAAkB,GAAlB,CAAT;AAAA,SAAhB,CAAP;AACD,OAFD,MAEO;AAAA;AACL,cAAM,cAAc,YAAY,gBAAZ,CAA6B,OAA7B,CAApB;AACA;AAAA,eAAO,YAAY,GAAZ,CAAgB,UAAC,GAAD;AAAA,qBACrB,YAAY,MAAZ,CAAmB,UAAC,MAAD,EAAS,IAAT,EAAkB;AACnC,uBAAO,IAAP,IAAe,IAAI,IAAJ,CAAf;AACA,uBAAO,MAAP;AACD,eAHD,EAGG,EAHH,CADqB;AAAA,aAAhB;AAAP;AAFK;;AAAA;AAQN;AACF;;;sCAEiB,O,EAAS;AACzB,aAAO,YAAY,YAAZ,CAAyB,KAAK,WAAL,CAAiB,OAAjB,CAAzB,CAAP;AACD;;;uCAEkB,O,EAAS;AAC1B,aAAO,YAAY,aAAZ,CAA0B,KAAK,WAAL,CAAiB,OAAjB,CAA1B,CAAP;AACD;;;qCAEgB,G,EAAK,I,EAAM,K,EAAO;AAAA;;AACjC,UAAM,SAAS,YAAY,mBAAZ,CAAgC,GAAhC,EAAqC,IAArC,EAA2C,KAA3C,CAAf;AACA,aAAO,OAAP,CAAe,gBAAwB;AAAA;;AAAA,YAAtB,GAAsB;AAAA,YAAjB,IAAiB;AAAA,YAAX,KAAW;;AACrC,YAAI,CAAC,OAAK,IAAL,CAAU,GAAV,CAAL,EAAqB,OAAK,IAAL,CAAU,GAAV,IAAiB,EAAjB;AACrB,eAAK,IAAL,CAAU,GAAV,EAAe,IAAf,IAAuB,KAAvB;AACD,OAHD;AAID;;;yCAoBoB,G,EAAK,I,EAAM,O,EAAS;AACvC,UAAI,CAAC,KAAK,QAAL,CAAc,GAAd,CAAL,EAAyB,KAAK,QAAL,CAAc,GAAd,IAAqB,EAArB;AACzB,WAAK,QAAL,CAAc,GAAd,EAAmB,IAAnB,IAA2B,OAA3B;AACD;;;2CAEsB,G,EAAK,I,EAAM;AAChC,UAAI,KAAK,QAAL,CAAc,GAAd,CAAJ,EAAwB,OAAO,KAAK,QAAL,CAAc,GAAd,EAAmB,IAAnB,CAAP;AACxB,UAAI,oBAAY,KAAK,QAAL,CAAc,GAAd,CAAZ,EAAgC,MAAhC,KAA2C,CAA/C,EAAkD,OAAO,KAAK,QAAL,CAAc,GAAd,CAAP;AACnD;;;wBAzFa;AAAE,aAAO,KAAK,QAAZ;AAAuB;;;wBAErB;AAAE,aAAO,KAAK,YAAZ;AAA2B;;;wBAE5B;AAAE,aAAO,KAAK,aAAZ;AAA4B;;;wBAE5B;AAAE,aAAO,KAAK,eAAZ;AAA8B;;;wBAEjC;AAAE,aAAO,KAAK,cAAZ;AAA6B;;;wBAEvB;AAAE,aAAO,KAAK,sBAAZ;AAAqC;;;wBAExD;AAAE,aAAO,KAAK,KAAZ;AAAoB;;;wBAElB;AAAE,aAAO,KAAK,SAAZ;AAAwB;;;wBA2DvB;AAAA;;AAChB,aAAO,oBAAY,KAAK,QAAjB,EAA2B,GAA3B,CAA+B,UAAC,GAAD;AAAA,eACpC,oBAAY,OAAK,QAAL,CAAc,GAAd,CAAZ,EAAgC,GAAhC,CAAoC,UAAC,IAAD;AAAA,iBACjC,EAAC,QAAD,EAAM,KAAK,OAAK,WAAL,CAAiB,OAAjB,CAAyB,IAAzB,CAAX,EAA2C,SAAS,OAAK,QAAL,CAAc,GAAd,EAAmB,IAAnB,CAApD,EADiC;AAAA,SAApC,CADoC;AAAA,OAA/B,EAIL,MAJK,CAIE,UAAC,GAAD,EAAM,IAAN;AAAA,eAAe,IAAI,MAAJ,CAAW,IAAX,CAAf;AAAA,OAJF,EAImC,EAJnC,CAAP;AAKD;;;6BAzHe,O,EAAS,U,EAAY,Q,EAAU;AAC7C,aAAO,IAAI,WAAJ,CAAgB,OAAhB,EAAyB,YAAY,YAAZ,CAAyB,UAAzB,CAAzB,EAA+D,QAA/D,CAAP;AACD;;;8BAEgB,O,EAAS,U,EAAY,Q,EAAU;AAC9C,aAAO,IAAI,WAAJ,CAAgB,OAAhB,EAAyB,YAAY,aAAZ,CAA0B,OAA1B,EAAmC,UAAnC,CAAzB,EAAyE,QAAzE,CAAP;AACD;;;iCAEmB,I,EAAM;AACxB,aAAO,oBAAY,IAAZ,EAAkB,GAAlB,CAAsB,UAAC,GAAD;AAAA,eAAS,KAAK,GAAL,CAAT;AAAA,OAAtB,EAA0C,IAA1C,CAA+C,UAAC,CAAD,EAAI,CAAJ;AAAA,eAAU,CAAC,EAAE,EAAF,IAAQ,CAAT,KAAe,EAAE,EAAF,IAAQ,CAAvB,CAAV;AAAA,OAA/C,CAAP;AACD;;;iCAEmB,I,EAAM;AACxB,aAAO,KAAK,MAAL,CAAY,UAAC,IAAD,EAAO,GAAP,EAAe;AAChC,YAAI,IAAI,EAAJ,IAAU,IAAd,EAAoB,cAAY,IAAI,EAAhB,IAAwB,GAAxB;AACpB,eAAO,IAAP;AACD,OAHM,EAGJ,EAHI,CAAP;AAID;;;kCAEoB,O,EAAS,I,EAAM;AAClC,UAAM,cAAc,YAAY,gBAAZ,CAA6B,OAA7B,CAApB;AACA,aAAO,KAAK,GAAL,CAAS,UAAC,GAAD;AAAA,eACd,YAAY,MAAZ,CAAmB,UAAC,IAAD,EAAO,IAAP,EAAa,KAAb,EAAuB;AACxC,eAAK,IAAL,IAAa,IAAI,KAAJ,CAAb;AACA,iBAAO,IAAP;AACD,SAHD,EAGG,EAHH,CADc;AAAA,OAAT,CAAP;AAMD;;;kCAEoB,O,EAAS,I,EAAM;AAClC,UAAM,cAAc,YAAY,gBAAZ,CAA6B,OAA7B,CAApB;AACA,aAAO,KAAK,GAAL,CAAS,UAAC,GAAD;AAAA,eAAS,YAAY,GAAZ,CAAgB,UAAC,IAAD;AAAA,iBAAU,IAAI,IAAJ,CAAV;AAAA,SAAhB,CAAT;AAAA,OAAT,CAAP;AACD;;;qCAEuB,O,EAAS;AAC/B,aAAO,QAAQ,GAAR,CAAY,UAAC,MAAD;AAAA,eAAY,OAAO,IAAnB;AAAA,OAAZ,CAAP;AACD;;;mCAEqB,O,EAAS,a,EAAe;AAC5C,aAAO,CAAC,OAAD,IAAY,iBAAO,GAAP,CAAW,OAAX,EAAoB,aAApB,CAAnB;AACD;;;wCAiE0B,G,EAAK,S,EAAW,K,EAAO;AAChD,UAAI,QAAO,GAAP,uDAAO,GAAP,OAAe,QAAnB,EAA6B;;AAC3B,eAAO,GAAP;AACD,OAFD,MAEO;AACL,eAAO,CACL,CAAC,GAAD,EAAM,SAAN,EAAiB,KAAjB,CADK,CAAP;AAGD;AACF","file":"seedsondata.js","sourcesContent":["import semver from 'semver';\nimport 'core-js/fn/array/find';\n\nexport class SeedsonData {\n  /* columns\n   * {data, dataLabel, version, versionColumn, developmentFlagColumn, noSeed}\n   */\n  constructor(columns, sourceData = [], comments = {}) {\n    this._columns = columns;\n    this._columnNames = SeedsonData.namesFromColumns(columns);\n    this._columnLabels = this.columns.map((column) => column.dataLabel);\n    this._columnVersions = this.columns.map((column) => column.version);\n    this._versionColumn = this.columns.find((column) => column.versionColumn);\n    this._developmentFlagColumn = this.columns.find((column) => column.developmentFlagColumn);\n    this._data = [\n      this.columnNames.reduce((row, value, index) => { row[value] = value; return row; }, {}),\n      this.columnNames.reduce((row, value, index) => { row[value] = this.columnLabels[index]; return row; }, {}),\n      this.columnNames.reduce((row, value, index) => { row[value] = this.columnVersions[index]; return row; }, {}),\n    ].concat(sourceData.map((row) => Object.assign({}, row)));\n    this._comments = comments;\n  }\n\n  static fromHash(columns, sourceData, comments) {\n    return new SeedsonData(columns, SeedsonData.hashToNative(sourceData), comments);\n  }\n\n  static fromArray(columns, sourceData, comments) {\n    return new SeedsonData(columns, SeedsonData.arrayToNative(columns, sourceData), comments);\n  }\n\n  static hashToNative(data) {\n    return Object.keys(data).map((key) => data[key]).sort((a, b) => (a.id || 0) - (b.id || 0));\n  }\n\n  static nativeToHash(data) {\n    return data.reduce((hash, row) => {\n      if (row.id != null) hash[`data${row.id}`] = row;\n      return hash;\n    }, {});\n  }\n\n  static arrayToNative(columns, data) {\n    const columnNames = SeedsonData.namesFromColumns(columns);\n    return data.map((row) =>\n      columnNames.reduce((hash, name, index) => {\n        hash[name] = row[index];\n        return hash;\n      }, {})\n    );\n  }\n\n  static nativeToArray(columns, data) {\n    const columnNames = SeedsonData.namesFromColumns(columns);\n    return data.map((row) => columnNames.map((name) => row[name]));\n  }\n\n  static namesFromColumns(columns) {\n    return columns.map((column) => column.data);\n  }\n\n  static isAllowVersion(version, targetVersion) {\n    return !version || semver.lte(version, targetVersion);\n  }\n\n  get columns() { return this._columns; }\n\n  get columnNames() { return this._columnNames; }\n\n  get columnLabels() { return this._columnLabels; }\n\n  get columnVersions() { return this._columnVersions; }\n\n  get versionColumn() { return this._versionColumn; }\n\n  get developmentFlagColumn() { return this._developmentFlagColumn; }\n\n  get data() { return this._data; }\n\n  get comments() { return this._comments; }\n\n  contentData(options = {}) {\n    const {version, denyDevelop, denyNoSeed} = options;\n    let columns = this.columns;\n    let contentData = this.data.slice(3);\n    if (denyDevelop && this.developmentFlagColumn) {\n      const developmentFlagColumnName = this.developmentFlagColumn.data;\n      contentData = contentData.filter((row) => !row[developmentFlagColumnName]);\n    }\n    if (version) {\n      columns = columns.filter((column) => SeedsonData.isAllowVersion(column.version, version));\n      if (this.versionColumn) {\n        const versionColumnName = this.versionColumn.data;\n        contentData = contentData.filter((row) => SeedsonData.isAllowVersion(row[versionColumnName], version));\n      }\n    }\n    if (denyNoSeed) {\n      columns = columns.filter((column) => !column.noSeed);\n    }\n    if (columns.length === this.columns.length) {\n      return contentData.map((row) => Object.assign({}, row));\n    } else {\n      const columnNames = SeedsonData.namesFromColumns(columns);\n      return contentData.map((row) =>\n        columnNames.reduce((newrow, name) => {\n          newrow[name] = row[name];\n          return newrow;\n        }, {})\n      );\n    }\n  }\n\n  contentDataToHash(options) {\n    return SeedsonData.nativeToHash(this.contentData(options));\n  }\n\n  contentDataToArray(options) {\n    return SeedsonData.nativeToArray(this.contentData(options));\n  }\n\n  setDataAtRowProp(row, prop, value) {\n    const inputs = SeedsonData.setDataInputToArray(row, prop, value);\n    inputs.forEach(([row, prop, value]) => {\n      if (!this.data[row]) this.data[row] = {};\n      this.data[row][prop] = value;\n    });\n  }\n\n  static setDataInputToArray(row, propOrCol, value) {\n    if (typeof row === 'object') { // is it an array of changes\n      return row;\n    } else {\n      return [\n        [row, propOrCol, value],\n      ];\n    }\n  }\n\n  get allComments() {\n    return Object.keys(this.comments).map((row) =>\n      Object.keys(this.comments[row]).map((prop) =>\n        ({row, col: this.columnNames.indexOf(prop), comment: this.comments[row][prop]})\n      )\n    ).reduce((all, part) => all.concat(part), []);\n  }\n\n  saveCommentAtRowProp(row, prop, comment) {\n    if (!this.comments[row]) this.comments[row] = {};\n    this.comments[row][prop] = comment;\n  }\n\n  removeCommentAtRowProp(row, prop) {\n    if (this.comments[row]) delete this.comments[row][prop];\n    if (Object.keys(this.comments[row]).length === 0) delete this.comments[row];\n  }\n}\n"]}